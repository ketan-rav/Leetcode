Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
 
Solution:

class Solution {
public:
    TreeNode* constructTree(vector<int>& inorder, vector<int>& postorder, int iStart, int iEnd, int pStart, int pEnd)
    {
        //if inorder end is less than start then there will be no more subtrees
        if(iStart > iEnd)
            return NULL;
            
        //making root of the current subtree
        int rootVal=postorder[pEnd];
        TreeNode *curr=new TreeNode(rootVal);
        
        int rootIndex=iStart;
        
        //finding the index of root of current subtree so that can devide the inorder into two parts as root comes b/w left and right in inorder traversal
        while(rootIndex<=iEnd)
        {
            if(inorder[rootIndex]==rootVal)
                break;
            rootIndex++;
        }
        
        //calculating number of left and right subtree elements
        int leftTreeSize = rootIndex - iStart;
        int rightTreeSize = iEnd - rootIndex;
        
        
        //Recursively constructing left and roght subtree
        curr->left  = constructTree(inorder,postorder,iStart,rootIndex-1,pStart,pStart+leftTreeSize-1);
        curr->right = constructTree(inorder,postorder,rootIndex+1,iEnd,pEnd-rightTreeSize,pEnd-1);
        return curr;
        
        
        
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len = inorder.size();
        if(len==0)
            return NULL;
        else
        {
            return constructTree(inorder,postorder,0,len-1,0,len-1);
           
        }
            
        
    }
};
