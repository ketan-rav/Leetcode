Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


Solution:

class Solution {
public:
    TreeNode* constructTree(vector<int>& preorder, vector<int>& inorder, int iStart, int iEnd, int pStart, int pEnd)
    {
        if(iStart > iEnd)
            return NULL;
        int rootVal=preorder[pStart];
        TreeNode *curr=new TreeNode(rootVal);
        
        int rootIndex=iStart;
        while(rootIndex<=iEnd)
        {
            if(inorder[rootIndex]==rootVal)
                break;
            rootIndex++;
        }
        
        int leftTreeSize = rootIndex - iStart;
        int rightTreeSize = iEnd - rootIndex;
        
        curr->left  = constructTree(preorder,inorder,iStart,rootIndex-1,pStart+1,pEnd-rightTreeSize-1);
        curr->right = constructTree(preorder,inorder,rootIndex+1,iEnd,pStart+leftTreeSize+1,pEnd);
        return curr;
        
        
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int len = inorder.size();
        if(len==0)
            return NULL;
        else
        {
            return constructTree(preorder,inorder,0,len-1,0,len-1);
           
        }
    }
};
